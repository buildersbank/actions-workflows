name: SonarQube Analysis

on:
  workflow_call:
    inputs:
      SONAR_SOURCE_PATH:
        description: 'Caminho do código-fonte para análise'
        required: false
        default: '.'
        type: string
      SONAR_PROJECT_KEY:
        description: 'Nome do projeto no sonar'
        required: false
        default: '.'
        type: string
    secrets:
      SONAR_TOKEN:
        description: 'Token de autenticação para o SonarQube'
        required: true
      SONAR_HOST_URL:
        description: 'URL do servidor SonarQube'
        required: true

jobs:
  front_scan:
    name: SonarQube Front Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: SonarQube Scan 
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ${{ inputs.SONAR_SOURCE_PATH }}
          args: >
            -Dsonar.projectKey=${{ inputs.SONAR_PROJECT_KEY }}
            -Dsonar.exclusions=**/*.java
  
  check_java:
    name: Check for Java files
    runs-on: ubuntu-latest
    outputs:
      has_java: ${{ steps.check.outputs.has_java }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check if Java files exist
        id: check
        run: |
          if find . -name "*.java" | grep -q .; then
            echo "has_java=true" >> $GITHUB_OUTPUT
          else
            echo "has_java=false" >> $GITHUB_OUTPUT
          fi


  backend_scan:
    name: Backend SonarQube Analysis
    runs-on: ubuntu-latest
    needs: check_java
    if: ${{ needs.check_java.outputs.has_java == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
  
      - name: Detect Build Tool
        id: detect_build
        run: |
          if [ -f "gradlew" ]; then
            echo "build_dir=." >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ]; then
            echo "build_dir=." >> $GITHUB_OUTPUT
          else
            BUILD_DIR=$(find . -type f \( -name "gradlew" -o -name "pom.xml" \) | head -n 1 | xargs dirname)
            if [ -z "$BUILD_DIR" ]; then
              echo "Nenhum arquivo de build encontrado."
              exit 1
            fi
            echo "build_dir=$BUILD_DIR" >> $GITHUB_OUTPUT
          fi
  
      - name: Build Java Project
        run: |
          cd ${{ steps.detect_build.outputs.build_dir }}
          if [ -f "gradlew" ]; then
            ./gradlew clean build
          elif [ -f "pom.xml" ]; then
            ./mvnw clean install
          else
            echo "Nenhum arquivo de build válido encontrado no diretório detectado."
            exit 1
          fi
  
      - name: Detect Java Binaries
        id: detect_binaries
        run: |
          BINARIES=$(find ${{ steps.detect_build.outputs.build_dir }} -type d -path "*/classes" -o -path "*/build/classes/*" -o -path "*/target/classes")
          if [ -z "$BINARIES" ]; then
            echo "Nenhum diretório de binários encontrado."
            exit 1
          fi
          echo "binaries=$BINARIES" >> $GITHUB_OUTPUT
  
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: '.' 
          args: >
            -Dsonar.projectKey=${{ inputs.SONAR_PROJECT_KEY }}-java
            -Dsonar.java.binaries=${{ steps.detect_binaries.outputs.binaries }}
  
